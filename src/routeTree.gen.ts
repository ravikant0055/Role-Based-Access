/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedProductsRouteImport } from './routes/_protected/products'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as AuthUnauthorizedRouteImport } from './routes/_auth/unauthorized'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'

const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/_protected/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProductsRoute = ProtectedProductsRouteImport.update({
  id: '/_protected/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/_protected/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUnauthorizedRoute = AuthUnauthorizedRouteImport.update({
  id: '/_auth/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/unauthorized': typeof AuthUnauthorizedRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/products': typeof ProtectedProductsRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/unauthorized': typeof AuthUnauthorizedRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/products': typeof ProtectedProductsRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/unauthorized': typeof AuthUnauthorizedRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/products': typeof ProtectedProductsRoute
  '/_protected/': typeof ProtectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/unauthorized' | '/dashboard' | '/products' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/unauthorized' | '/dashboard' | '/products' | '/'
  id:
    | '__root__'
    | '/_auth/login'
    | '/_auth/unauthorized'
    | '/_protected/dashboard'
    | '/_protected/products'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthUnauthorizedRoute: typeof AuthUnauthorizedRoute
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedProductsRoute: typeof ProtectedProductsRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/products': {
      id: '/_protected/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProtectedProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/unauthorized': {
      id: '/_auth/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof AuthUnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthUnauthorizedRoute: AuthUnauthorizedRoute,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedProductsRoute: ProtectedProductsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
